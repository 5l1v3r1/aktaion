/**
  * Copyright 2016 - Caspida Inc., All rights reserved.
  * This is Caspida proprietary and confidential material and its use
  * is subject to license terms.
  * Created on 7/2/16.
  *
  * @author joez
  */

package com.aktaion.ml.behaviors

import scala.util.matching.Regex

class ExploitationTimingBehaviors extends MicroBehaviorSet {
  val maxTimeIntervalA = MicroBehaviorData("MaxTimeIntervalA", "Difference in timestamp between event 1 and event 2")
  val maxTimeIntervalB = MicroBehaviorData("MaxTimeIntervalB", "Difference in timestamp between event 2 and event 3")
  val maxTimeIntervalC = MicroBehaviorData("MaxTimeIntervalC", "Difference in timestamp between event 3 and event 4")
  val maxTimeIntervalD = MicroBehaviorData("MaxTimeIntervalD", "Difference in timestamp between event 4 and event 5")

  val minTimeIntervalA = MicroBehaviorData("MinTimeIntervalA", "Difference in timestamp between event 1 and event 2")
  val minTimeIntervalB = MicroBehaviorData("MinTimeIntervalB", "Difference in timestamp between event 2 and event 3")
  val minTimeIntervalC = MicroBehaviorData("MinTimeIntervalC", "Difference in timestamp between event 3 and event 4")
  val minTimeIntervalD = MicroBehaviorData("MinTimeIntervalD", "Difference in timestamp between event 4 and event 5")

  val intervalLength = MicroBehaviorData("TimeLengthInWindow", "Difference last and first time in the window")

  //build a histogram distribution of
  val ratioOfDeltasA = MicroBehaviorData("DeltaRatioA", "Count of time delta < 1 second over window size")
  val ratioOfDeltasB = MicroBehaviorData("DeltaRatioA", "Count of time delta < 1 second over window size")
  val ratioOfDeltasC = MicroBehaviorData("DeltaRatioA", "Count of time delta < 1 second over window size")
  val ratioOfDeltasD = MicroBehaviorData("DeltaRatioA", "Count of time delta < 1 second over window size")


  val behaviorVector = List(maxTimeIntervalA,
    maxTimeIntervalB,
    maxTimeIntervalC,
    maxTimeIntervalD,
    minTimeIntervalA,
    minTimeIntervalB,
    minTimeIntervalC,
    minTimeIntervalD,
    intervalLength)

}

class ExploitationUriBehaviors extends MicroBehaviorSet {
  val uriMaxPathDepth = MicroBehaviorData("MaxPathDepth", "Maximum path length of all URI's observed")
  val uriMinPathDepth = MicroBehaviorData("MinPathDepth", "Minimum path length of all URI's observed")

  val behaviorVector = List(uriMaxPathDepth, uriMinPathDepth)

  val encodingBase64 = new Regex( """^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$""")
  val encodingBase64modified = new Regex( """^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$""")
  val encodingPercentSimple = new Regex( """%[A-Fa-f0-9]{2}""")


}


class ExploitationRefererStringBehaviors extends MicroBehaviorSet {
  val numOfUniqueRefererStrings = MicroBehaviorData("NumberOfUniqueRefers", "Unique number of web referer strings in window")
  val maxRefererChainLength = MicroBehaviorData("MaxRefererChainLength", "Longest number of correlated referer strings in sequence")
  val ratioOfNullRefers = MicroBehaviorData("RatioOFNullRefererStrings", "Number of null refers over total number in window")

  val behaviorVector = List(numOfUniqueRefererStrings, maxRefererChainLength)

}



class ExploitationMimeTypeBehaviors extends MicroBehaviorSet {
  val mimeTypeCnt = MicroBehaviorData("MimeTypeUniqueCnt", "Number of unique MIME types in window")

  val behaviorVector = List(mimeTypeCnt)


  val mimeTypesOfInterest = Set("application/x-java-archive",
  "application/x-shockwave-flash",
  "application/x-silverlight-app",
  "application/jar",
  "application/octet-stream",
  "application/x-dosexec",
  "application/java",
  "application/java-archive",
  "application/x-msdownload",
  "application/zip",
  "application/x-java-archive")

}

class ExploitationDomainNameBehaviors extends MicroBehaviorSet{
  val domainNameEntropy = MicroBehaviorData("Entropy of Characters in Domain", "Entropy of character distribution in domain name")

  val behaviorVector = List(domainNameEntropy)



}